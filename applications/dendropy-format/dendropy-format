#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import argparse
import dendropy
if not (sys.version_info.major >= 3 and sys.version_info.minor >= 4):
    from dendropy.utility.filesys import pre_py34_open as open
from dendropy.utility import cli
from dendropy.utility import error
from dendropy.utility import messaging

usage = """\
cat SRC-FILE | dendropy-format {nexus|newick|phylip|nexml|fasta} --from [FORMAT] [OPTIONS] > DEST-FILE
"""

def convert(args):
    if args.input_format is None:
        sys.exit("Please specify source format")
    src = sys.stdin
    read_kwargs = {}
    if args.input_format == "phylip-strict":
        args.input_format = "phylip"
        read_kwargs["strict"] = True
        read_kwargs["multispace_delimiter"] = False
        read_kwargs["interleaved"] = False
    elif args.input_format == "phylip-relaxed-singlespace":
        args.input_format = "phylip"
        read_kwargs["strict"] = False
        read_kwargs["multispace_delimiter"] = False
        read_kwargs["interleaved"] = False
    elif args.input_format == "phylip-relaxed-multispace":
        args.input_format = "phylip"
        read_kwargs["strict"] = False
        read_kwargs["multispace_delimiter"] = True
        read_kwargs["interleaved"] = False
    if args.input_format == "phylip-strict-interleaved":
        args.input_format = "phylip"
        read_kwargs["strict"] = True
        read_kwargs["multispace_delimiter"] = False
        read_kwargs["interleaved"] = True
    elif args.input_format == "phylip-relaxed-singlespace-interleaved":
        args.input_format = "phylip"
        read_kwargs["strict"] = False
        read_kwargs["multispace_delimiter"] = False
        read_kwargs["interleaved"] = True
    elif args.input_format == "phylip-relaxed-multispace-interleaved":
        args.input_format = "phylip"
        read_kwargs["strict"] = False
        read_kwargs["multispace_delimiter"] = True
        read_kwargs["interleaved"] = True
    if args.input_format in ("fasta", "phylip"):
        read_kwargs["data_type"] = args.data_type
    with src:
        ds = dendropy.DataSet.get(
                file=src,
                schema=args.input_format,
                **read_kwargs,
                )
    dest = sys.stdout
    with dest:
        ds.write(
                file=dest,
                schema=args.output_format)

def to_nexus(args):
    args.output_format = "nexus"
    convert(args)

def to_newick(args):
    args.output_format = "newick"
    convert(args)

def to_nexus(args):
    args.output_format = "nexus"
    convert(args)

def to_nexml(args):
    args.output_format = "nexml"
    convert(args)

def to_fasta(args):
    args.output_format = "fasta"
    convert(args)

def to_phylip(args):
    args.output_format = "phylip"
    convert(args)

def main():
    """
    Main CLI handler.
    """

    parser = argparse.ArgumentParser(usage=usage)
    source_options = argparse.ArgumentParser(add_help=False)
    source_options.add_argument(
            "-f", "--from",
            dest="input_format",
            metavar="FORMAT",
            default=None,
            choices=[
                    "fasta",
                    "newick",
                    "nexml",
                    "nexus",
                    "phylip-strict",
                    "phylip-relaxed-singlespace",
                    "phylip-relaxed-multispace",
                    "phylip-strict-interleaved",
                    "phylip-relaxed-singlespace-interleaved",
                    "phylip-relaxed-multispace-interleaved",
                    ],
            help="Format of data source.")
    source_options.add_argument(
            "-d", "--data-type",
            dest="data_type",
            default=None,
            choices=[
                    "dna",
                    "rna",
                    "standard",
                    ],
            help="Type of data")
    parents = [source_options]
    subparsers = parser.add_subparsers(title="Format",
            description="Format Types",
            help="Additional help.",
            dest="format_subcommand")
    subparsers.add_parser("fasta", parents=parents).set_defaults(func=to_fasta)
    subparsers.add_parser("newick", parents=parents).set_defaults(func=to_newick)
    subparsers.add_parser("nexml", parents=parents).set_defaults(func=to_nexml)
    subparsers.add_parser("nexus", parents=parents).set_defaults(func=to_nexus)
    subparsers.add_parser("phylip", parents=parents).set_defaults(func=to_phylip)
    args = parser.parse_args()
    if args.format_subcommand is None:
        args.format_subcommand = args.input_format
    args.func(args)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit("\n(Terminating due to user interrupt signal)")
